{"version":3,"sources":["conta/Conta.js","transacoes/Transacao.js","transacoes/Transacoes.js","api/index.js","App.js","serviceWorker.js","index.js"],"names":["Conta","saldo","realizarTransacao","useState","transacao","valor","valores","atualizarValores","handleChange","e","target","name","value","valoresAtualizados","className","data-testid","onSubmit","preventDefault","dataTransacao","Date","toLocaleDateString","data","type","onChange","checked","defaultProps","Transacao","tipo","Transacoes","transacoes","map","id","key","defaultProp","TRANSACOES_URI","CONTA_URI","conecta","uri","options","fetch","then","resposta","a","ok","json","dados","console","log","Error","method","headers","body","JSON","stringify","App","atualizarSaldo","atualizarTransacoes","api","useEffect","obterSaldo","carregarTransacoes","novoSaldo","parseInt","calcularNovoSaldo","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d70218bd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Conta.css'\n\nconst Conta = ({ saldo, realizarTransacao }) => {\n    const [valores, atualizarValores] = useState({transacao: '', valor: 0});\n\n    function handleChange(e) {\n        const { name, value } = e.target;\n        const valoresAtualizados = { ...valores, [name]: value};\n\n        atualizarValores(valoresAtualizados);\n    }\n\n    function handleSubmit(e) {\n        e.preventDefault();\n        const dataTransacao = new Date().toLocaleDateString('pt-br');\n        realizarTransacao({...valores, data: dataTransacao});\n    }\n\n    return <div className=\"Conta-header\">\n        <h2>Conta</h2>\n        <p>Saldo: <span data-testid=\"saldo-conta\" className=\"Saldo-valor\">{`R$ ${saldo}`}</span></p>\n        <form onSubmit={handleSubmit}>\n            <div>\n                <label>\n                    Depósito\n                    <input\n                        type=\"radio\"\n                        name=\"transacao\"\n                        value=\"deposito\"\n                        onChange={handleChange}\n                        data-testid=\"transacao\"\n                        checked={valores.transacao === 'deposito'}   \n                    />\n                </label>\n            </div>\n            \n            <div>\n                <label>\n                    Saque\n                    <input\n                        type=\"radio\"\n                        name=\"transacao\"\n                        value=\"saque\"\n                        data-testid=\"transacao\"\n                        onChange={handleChange}\n                        checked={valores.transacao === 'saque'}     \n                    />\n                </label>\n            </div>\n\n            <label>Valor:</label>\n            <input\n                type=\"text\"\n                name=\"valor\"\n                value={valores.valor}\n                data-testid=\"valor\"\n                onChange={handleChange}\n            ></input>\n\n            <div>\n                <button type='submit'>\n                    Realizar operação\n                </button>\n            </div>\n        </form>\n    </div>\n};\n\nConta.defaultProps = {\n    saldo: 0,\n}\n\nConta.propTypes = {\n    saldo: PropTypes.number,\n};\n\nexport default Conta;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Transacao.css'\n\n\nfunction Transacao({ data, tipo, valor }) {\n    return (\n        <div className=\"transacao-container\">\n            <p>{data}</p>\n            <p>{tipo}</p>\n            <p>R$ {valor}</p>\n        </div>\n    )\n};\n\nTransacao.defaultProps = {\n    tipo: '',\n    valor: '0',\n    data: '',\n}\n\nTransacao.propTypes = {\n    tipo: PropTypes.string,\n    valor: PropTypes.string,\n    data: PropTypes.string,\n}\n\nexport default Transacao;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Transacao from './Transacao';\n\nconst Transacoes = ({ transacoes }) => {\n    return <div data-testid=\"transacoes\">\n        {transacoes && transacoes\n            .map(({id, transacao, valor, data}) =>\n            <Transacao key={`${id}-${transacao}`} tipo={transacao} valor={valor} data={data}\n        />)}\n    </div>\n};\n\nTransacoes.defaultProp = {\n    transacoes: [{\n        tipo: '',\n        valor: '',\n        data: '',\n    }],\n}\n\nTransacoes.propTypes = {\n    transacoes: PropTypes.arrayOf(PropTypes.shape({\n        tipo: PropTypes.string,\n        valor: PropTypes.string,\n        data: PropTypes.string,\n    })),\n}\n\n\nexport default Transacoes;\n","const API_URL = 'http://localhost:3001';\nconst TRANSACOES_URI = `${API_URL}/transacoes`;\nconst CONTA_URI = `${API_URL}/conta`;\n\nconst conecta = (uri, options = {}) => {\n  return fetch(uri, options).then(async (resposta) => {\n    if (resposta.ok) {\n      const dados = await resposta.json();\n      return dados;\n    }\n\n    console.log(resposta)\n    throw new Error(resposta);\n  })\n}\n\nconst listaTransacoes = () => conecta(TRANSACOES_URI);\n\nconst buscaSaldo = () => conecta(CONTA_URI).then(dados => dados.saldo);\n\nconst atualizaSaldo = (saldo) => conecta(CONTA_URI, {\n  method: 'POST',\n  headers: {'Content-Type': 'application/json;charset=utf-8'},\n  body: JSON.stringify({saldo}),\n});\n\nconst atualizaTransacoes = (dados) => conecta(TRANSACOES_URI, {\n  method: 'POST',\n  headers: {'Content-Type': 'application/json;charset=utf-8'},\n  body: JSON.stringify(dados),\n});\n\nexport default {\n  listaTransacoes,\n  buscaSaldo,\n  atualizaSaldo,\n  atualizaTransacoes,\n};\n","import React, { useEffect, useState } from 'react';\n\nimport Conta from './conta/Conta';\nimport Transacoes from './transacoes/Transacoes';\nimport api from './api';\n\nimport './App.css';\n\nexport const calcularNovoSaldo = (valores, saldo) => {\n  if (valores.transacao === 'deposito') {\n    return saldo + parseInt(valores.valor)\n  } else {\n    return saldo - parseInt(valores.valor);\n  }\n}\n\nfunction App() {\n  const [saldo, atualizarSaldo] = useState(1000);\n  const [transacoes, atualizarTransacoes] = useState([]);\n\n  async function carregarTransacoes() {\n    const transacoes = await api.listaTransacoes();\n    atualizarTransacoes(transacoes);\n  }\n\n  async function obterSaldo() {\n    atualizarSaldo(await api.buscaSaldo());\n  }\n\n  function realizarTransacao(valores) {  \n    const novoSaldo = calcularNovoSaldo(valores, saldo);\n\n    api.atualizaSaldo(novoSaldo).catch((error) => console.error(error))\n    api.atualizaTransacoes(valores).catch((error) => console.error(error))\n    \n    atualizarSaldo(novoSaldo);\n    atualizarTransacoes([valores]);\n  }\n\n  useEffect(() => {\n    obterSaldo();\n    carregarTransacoes();\n  }, [saldo])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>ByteBank</h1>\n      </header>\n\n      <Conta saldo={saldo} realizarTransacao={realizarTransacao}/>\n      <Transacoes transacoes={transacoes} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}